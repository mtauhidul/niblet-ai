// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  userProfile    UserProfile?
  weightLogs     WeightLog[]
  meals          Meal[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  age              Int?
  gender           String?
  currentWeight    Float?
  targetWeight     Float?
  height           Float?
  activityLevel    String?
  dietaryPreferences String[]
  allergies        String[]
  goalType         String?
  targetCalories   Int?      @default(2000)
  targetProtein    Int?      @default(120)
  targetCarbs      Int?      @default(200)
  targetFat        Int?      @default(60)
  aiPersonality    String?   @default("best-friend")
  threadId         String?
  assistantId      String?
  onboardingCompleted Boolean @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WeightLog {
  id        String   @id @default(cuid())
  userId    String
  weight    Float
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Meal {
  id        String   @id @default(cuid())
  userId    String
  name      String
  calories  Int
  protein   Int?
  carbs     Int?
  fat       Int?
  mealType  String?
  items     String[]
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}